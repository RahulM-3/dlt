import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt

# Load dataset
file_path = "taxi_trip_pricing.csv"  # Replace with your dataset path
data = pd.read_csv(file_path)

# Explore dataset
print(data.head())

# Handle missing values if any
data = data.dropna()

# One-hot encode categorical variables
categorical_columns = ['Time_of_Day', 'Day_of_Week', 'Traffic_Conditions', 'Weather']
data = pd.get_dummies(data, columns=categorical_columns, drop_first=True)

# Separate target column
target_column = 'Trip_Price'

# Normalize numerical columns
numerical_columns = ['Trip_Distance_km', 'Passenger_Count', 'Base_Fare', 'Per_Km_Rate',
                     'Per_Minute_Rate', 'Trip_Duration_Minutes', target_column]

feature_scaler = MinMaxScaler()
data[numerical_columns] = feature_scaler.fit_transform(data[numerical_columns])

target_scaler = MinMaxScaler()
data[target_column] = target_scaler.fit_transform(data[[target_column]])

# Prepare sequences for LSTM
seq_length = 10  # Number of previous trips to consider
X, y = [], []
for i in range(len(data) - seq_length):
    X.append(data.iloc[i:i + seq_length].drop(columns=[target_column]).values)
    y.append(data.iloc[i + seq_length][target_column])

X = np.array(X)
y = np.array(y)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Convert arrays to float32 for compatibility with TensorFlow
X_train = X_train.astype('float32')
y_train = y_train.astype('float32')
X_test = X_test.astype('float32')
y_test = y_test.astype('float32')

# Build LSTM model
model = Sequential([
    LSTM(64, activation='relu', input_shape=(seq_length, X.shape[2])),
    Dense(1)  # Predicting `Trip_Price`
])

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.3)

# Predict on test data
y_pred = model.predict(X_test)

# Rescale predictions and actual values back to original scale
y_test_rescaled = target_scaler.inverse_transform(y_test.reshape(-1, 1))
y_pred_rescaled = target_scaler.inverse_transform(y_pred)

# Plot results
plt.figure(figsize=(10, 5))
plt.plot(y_test_rescaled, label='Actual Fare')
plt.plot(y_pred_rescaled, label='Predicted Fare')
plt.legend()
plt.title("Taxi Fare Forecasting")
plt.xlabel("Test Samples")
plt.ylabel("Fare")
plt.show()

# Evaluate the model
mse = mean_squared_error(y_test_rescaled, y_pred_rescaled)
mae = mean_absolute_error(y_test_rescaled, y_pred_rescaled)
rmse = np.sqrt(mse)
print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"Mean Absolute Error (MAE): {mae:.4f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")

# Model Summary
model.summary()
