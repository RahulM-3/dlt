import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from itertools import product
plt.rc('figure', autolayout=True)
plt.rc('image', cmap='magma')
kernel = tf.constant([[-1, -1, -1],
                    [-1,  10, -1],
                    [-1, -1, -1],
                   ])
kernel = tf.reshape(kernel, [*kernel.shape, 1, 1])
kernel = tf.cast(kernel, dtype=tf.float32)
image_path = '/content/demo_face.jpg'  # Update this path to your image location
image = tf.io.read_file(image_path)
image = tf.io.decode_jpeg(image, channels=1)
image = tf.image.resize(image, size=[300, 300])
image = tf.image.convert_image_dtype(image, dtype=tf.float32)
image = tf.expand_dims(image, axis=0)
plt.figure(figsize=(5, 5))
plt.imshow(tf.squeeze(image).numpy(), cmap='gray')
plt.axis('off')
plt.title('Original Grayscale Image')
plt.show()
conv_fn = tf.nn.conv2d

image_filter = conv_fn(
    input=image,
    filters=kernel,
    strides=(1, 1),
    padding='SAME',
)

plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
plt.imshow(tf.squeeze(image_filter))
plt.axis('on')
plt.title('Convolution')
pool = tf.nn.pool
image_condense = pool(
    input=image_filter,
    window_shape=(2, 2),
    pooling_type='MAX',
    strides=(1,1),
    padding='SAME',
)

plt.subplot(1, 3, 2)
plt.imshow(tf.squeeze(image_condense))
plt.axis('on')
plt.title('Pooling')
relu_fn = tf.nn.relu
image_detect = relu_fn(image_condense)
plt.subplot(1, 3, 3)
plt.imshow(tf.squeeze(image_detect))
plt.axis('on')
plt.title('Activation')
plt.show()
